group 'org.metanalysis'
version '0.1.0'

buildscript {
    ext {
        kotlinVersion = '1.1.2'
        dokkaVersion = '0.9.13'
        junitVersion = '4.12'
        metanalysisVersion = '0.1.4'
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'jacoco'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "com.github.andrei-heidelbacher.metanalysis:metanalysis-core:$metanalysisVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testCompile "junit:junit:$junitVersion"
}

jar {
    from rootProject.file('LICENSE')
    from rootProject.file('NOTICE')
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: [javadoc, dokkaJavadoc]) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task fatJar(type: Jar) {
    classifier = 'all'

    manifest {
        attributes 'Main-Class': 'org.metanalysis.ocb.Main'
    }

    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }

    with jar
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jacocoTestReport {
    dependsOn test

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

task codeCoverageReport(dependsOn: jacocoTestReport)
